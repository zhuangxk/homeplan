"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var app = getApp();
var index_1 = require("../../../api/index");
var util_1 = require("../../../utils/util");
var dialog_1 = require("@vant/weapp/dialog/dialog");
var year = new Date().getFullYear();
var month = new Date().getMonth();
Component({
    data: {
        keyboardShow: false,
        CustomBar: app.globalData.CustomBar,
        bills: [],
        dateMap: {},
        monthMap: {},
        dateMapKeys: [],
        loading: false,
        total: 0,
        slideReset: true,
        params: {
            "year": year,
            "month": month + 1,
            "page": 1,
            "page_size": -1
        },
        localDay: ["日", "一", "二", "三", "四", "五", "六"],
        actionType: 'add',
        curEditItem: {},
        lastTouchId: 0,
        pickerVal: year + '年' + (month + 1) + '月',
        months: [
            {
                values: [year - 2 + '年', year - 1 + '年', year + '年'],
                defaultIndex: 2
            },
            {
                values: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
                defaultIndex: month
            }
        ],
        monthShow: false
    },
    properties: {
        ledgerId: {
            type: Number
        }
    },
    lifetimes: {},
    observers: {
        ledgerId: function () {
            this.getBills();
        }
    },
    methods: {
        onClick: function (e) {
            var bill = e.currentTarget.dataset.item;
            wx.navigateTo({
                url: '/pages/ledger/bill_detail/bill_detail',
                events: {
                    acceptDataFromOpenedPage: function (data) {
                        console.log(data);
                    },
                    someEvent: function (data) {
                        console.log(data);
                    }
                },
                success: function (res) {
                    res.eventChannel.emit('acceptDataFromOpenerPage', { bill: bill });
                }
            });
        },
        getBills: function () {
            var _this = this;
            if (!this.data.ledgerId) {
                return;
            }
            if (this.data.loading) {
                return;
            }
            this.setData({
                loading: true
            });
            wx.showLoading({
                title: '加载中'
            });
            index_1.getBills(this.data.ledgerId, this.data.params).then(function (res) {
                _this.handleBillsRes(res);
                wx.hideLoading();
                _this.setData({
                    loading: false
                });
            });
        },
        handleBillsRes: function (res) {
            var _this = this;
            var list = res.list;
            var dateCount = res.date_count;
            var monthCount = res.month_count;
            var dateMap = {};
            dateCount.forEach(function (item) {
                dateMap[_this.getDateKey(item.date)] = {
                    list: [],
                    total: item.total,
                    sumIn: item.sum_in,
                    sumOut: item.sum_out,
                };
            });
            list.forEach(function (item) {
                var date = dateMap[_this.getDateKey(item.bill_time)];
                if (date.list) {
                    date.list.push(item);
                }
                else {
                    wx.showToast({
                        title: "计数出错"
                    });
                }
            });
            this.setData({
                total: res.total,
                dateMap: dateMap,
                dateMapKeys: Object.keys(dateMap),
                monthMap: monthCount[0] || {},
            });
        },
        getDateKey: function (iosdate) {
            var date = new Date(iosdate);
            var dateKey = util_1.formatMonthDate(date) + "  星期" + this.data.localDay[date.getDay()];
            if (util_1.formatMonthDate(date) == util_1.formatMonthDate(new Date())) {
                dateKey = "今日  星期" + this.data.localDay[new Date().getDay()];
            }
            return dateKey;
        },
        onAdd: function () {
            this.setData({
                curEditItem: {},
                actionType: 'add',
                keyboardShow: true
            });
        },
        onClose: function () {
            this.setData({
                keyboardShow: false
            });
        },
        onSave: function () {
            this.setData({
                keyboardShow: false,
                slideReset: true,
            });
            this.getBills();
        },
        onClickDelete: function (e) {
            var self = this;
            var id = e.currentTarget.dataset.id;
            dialog_1.default({
                showCancelButton: true,
                title: '提示',
                message: '确定要删除吗？',
                asyncClose: true
            })
                .then(function () {
                if (dialog_1.default.confirm)
                    index_1.delBill(id).then(function (_) {
                        if (dialog_1.default.close)
                            dialog_1.default.close();
                        self.getBills();
                    });
            })
                .catch(function () {
                if (dialog_1.default.close)
                    dialog_1.default.close();
            });
        },
        onClickEdit: function (e) {
            this.setData({
                curEditItem: e.currentTarget.dataset.item,
                actionType: 'edit',
                keyboardShow: true
            });
        },
        onTouchstart: function (e) {
            var id = e.currentTarget.dataset.id;
            if (id == this.data.lastTouchId) {
                return;
            }
            this.setData({
                lastTouchId: id,
                slideReset: true,
            });
        },
        onMonthCancel: function () {
            this.setData({
                monthShow: false
            });
        },
        onMonthShow: function () {
            this.setData({
                monthShow: true
            });
        },
        onMonthConfirm: function (e) {
            var _this = this;
            var _a = e.detail.index, yi = _a[0], mi = _a[1];
            this.setData({
                monthShow: false,
                pickerVal: [year - 2, year - 1, year][yi] + '年' + (mi + 1) + '月',
                params: {
                    "page_size": -1,
                    page: 1,
                    month: mi + 1,
                    year: [year - 2, year - 1, year][yi]
                }
            }, function () {
                _this.getBills();
            });
        }
    }
});
//# sourceMappingURL=data:application/json;base64,