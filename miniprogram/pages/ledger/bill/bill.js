"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var app = getApp();
var index_1 = require("../../../api/index");
var util_1 = require("../../../utils/util");
Component({
    data: {
        show: false,
        CustomBar: app.globalData.CustomBar,
        bills: [],
        dateMap: {},
        monthMap: {},
        dateMapKeys: [],
        loading: false,
        total: 0,
        params: {
            "page": 1,
            "page_size": -1
        },
        localsNum: ["一", "二", "三", "四", "五", "六", "七", "八", "九", "十", "十一", "十二"],
    },
    properties: {
        ledgerId: {
            type: Number
        }
    },
    lifetimes: {
        ready: function () {
            this.getBills();
        }
    },
    observers: {
        ledgerId: function () {
            this.getBills();
        }
    },
    methods: {
        onClick: function () {
            wx.navigateTo({
                url: '/pages/ledger/bill_detail/bill_detail',
                events: {
                    acceptDataFromOpenedPage: function (data) {
                        console.log(data);
                    },
                    someEvent: function (data) {
                        console.log(data);
                    }
                },
                success: function (res) {
                    res.eventChannel.emit('acceptDataFromOpenerPage', { data: 'test' });
                }
            });
        },
        getBills: function () {
            var _this = this;
            if (!this.data.ledgerId) {
                return;
            }
            if (this.data.loading) {
                return;
            }
            this.data.loading = true;
            wx.showLoading({
                title: '加载中'
            });
            index_1.getBills(this.data.ledgerId, this.data.params).then(function (res) {
                _this.handleBillsRes(res);
                wx.hideLoading();
                _this.data.loading = false;
            });
        },
        handleBillsRes: function (res) {
            var _this = this;
            var list = res.list;
            var dateCount = res.date_count;
            var monthCount = res.month_count;
            var dateMap = {};
            dateCount.forEach(function (item) {
                dateMap[_this.getDateKey(item.date)] = {
                    list: [],
                    total: item.total,
                    sumIn: item.sum_in,
                    sumOut: item.sum_out,
                };
            });
            list.forEach(function (item) {
                var date = dateMap[_this.getDateKey(item.bill_time)];
                if (date.list) {
                    date.list.push(item);
                }
                else {
                    wx.showToast({
                        title: "计数出错"
                    });
                }
            });
            this.setData({
                total: res.total,
                dateMap: dateMap,
                dateMapKeys: Object.keys(dateMap),
                monthMap: monthCount[0],
            });
        },
        getDateKey: function (iosdate) {
            var date = new Date(iosdate);
            var dateKey = util_1.formatMonthDate(date) + "  星期" + this.data.localsNum[date.getDay() - 1];
            if (util_1.formatMonthDate(date) == util_1.formatMonthDate(new Date())) {
                dateKey = "今日  星期" + this.data.localsNum[new Date().getDay() - 1];
            }
            return dateKey;
        },
        onAdd: function () {
            this.setData({
                show: true
            });
        },
        onClose: function () {
            this.setData({
                show: false
            });
        },
        onSave: function () {
            this.setData({
                show: false
            });
            this.getBills();
        },
    }
});
//# sourceMappingURL=data:application/json;base64,