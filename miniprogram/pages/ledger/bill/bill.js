"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var app = getApp();
var index_1 = require("../../../api/index");
var util_1 = require("../../../utils/util");
Component({
    data: {
        show: false,
        CustomBar: app.globalData.CustomBar,
        bills: [],
        dateMap: {},
        loading: false,
        total: 0,
        params: {
            "page": 1,
            "page_size": -1
        },
        localsNum: ["一", "二", "三", "四", "五", "六", "七", "八", "九", "十", "十一", "十二"],
    },
    properties: {
        ledgerId: {
            type: Number
        }
    },
    lifetimes: {
        ready: function () {
            this.getBills();
        }
    },
    observers: {
        ledgerId: function () {
            this.getBills();
        }
    },
    methods: {
        getBills: function () {
            var _this = this;
            if (!this.data.ledgerId) {
                return;
            }
            if (this.data.loading) {
                return;
            }
            this.data.loading = true;
            wx.showLoading({
                title: '加载中'
            });
            index_1.getBills(this.data.ledgerId, this.data.params).then(function (res) {
                _this.handleBillsRes(res);
                wx.hideLoading();
                _this.data.loading = false;
            });
        },
        handleBillsRes: function (res) {
            var _this = this;
            var list = res.list;
            var dateMap = {};
            list.forEach(function (item) {
                var date = new Date(item.bill_time);
                var dateKey = util_1.formatMonthDate(date) + "  星期" + _this.data.localsNum[date.getDay() - 1];
                dateMap[dateKey] = dateMap[dateKey] || {
                    list: [],
                    total: 0,
                    count: 0
                };
                dateMap[dateKey];
            });
            this.setData({
                bills: res.list,
                total: res.total,
                dateMap: dateMap
            });
            console.log(this.data.dateMap);
        },
        onAdd: function () {
            this.setData({
                show: true
            });
        },
        onClose: function () {
            this.setData({
                show: false
            });
        },
        onSave: function () {
            this.setData({
                show: false
            });
            this.getBills();
        },
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJpbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNLEdBQUcsR0FBRyxNQUFNLEVBQWdCLENBQUE7QUFDbEMsNENBQTZDO0FBQzdDLDRDQUFxRDtBQUNyRCxTQUFTLENBQUM7SUFDTixJQUFJLEVBQUU7UUFDRixJQUFJLEVBQUUsS0FBSztRQUNYLFNBQVMsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLFNBQVM7UUFDbkMsS0FBSyxFQUFFLEVBQWM7UUFDckIsT0FBTyxFQUFFLEVBQStCO1FBQ3hDLE9BQU8sRUFBRSxLQUFLO1FBQ2QsS0FBSyxFQUFFLENBQUM7UUFDUixNQUFNLEVBQUU7WUFDSixNQUFNLEVBQUUsQ0FBQztZQUNULFdBQVcsRUFBRSxDQUFDLENBQUM7U0FDbEI7UUFDRCxTQUFTLEVBQUUsQ0FBQyxHQUFHLEVBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsSUFBSSxFQUFDLElBQUksQ0FBQztLQUNqRTtJQUNELFVBQVUsRUFBRTtRQUNSLFFBQVEsRUFBRTtZQUNOLElBQUksRUFBRSxNQUFNO1NBQ2Y7S0FDSjtJQUNELFNBQVMsRUFBRTtRQUNQLEtBQUssRUFBTDtZQUNFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUNqQixDQUFDO0tBQ0o7SUFDRCxTQUFTLEVBQUU7UUFDUCxRQUFRLEVBQVI7WUFDSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUE7UUFDbkIsQ0FBQztLQUNKO0lBQ0QsT0FBTyxFQUFFO1FBQ0wsUUFBUSxFQUFSO1lBQUEsaUJBZ0JDO1lBZkcsSUFBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFDO2dCQUNuQixPQUFNO2FBQ1Q7WUFDRCxJQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFDO2dCQUNqQixPQUFNO2FBQ1Q7WUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUE7WUFDeEIsRUFBRSxDQUFDLFdBQVcsQ0FBQztnQkFDWCxLQUFLLEVBQUUsS0FBSzthQUNmLENBQUMsQ0FBQTtZQUNGLGdCQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxHQUFHO2dCQUNuRCxLQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFBO2dCQUN4QixFQUFFLENBQUMsV0FBVyxFQUFFLENBQUE7Z0JBQ2hCLEtBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQTtZQUM3QixDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUM7UUFDRCxjQUFjLEVBQWQsVUFBZSxHQUFjO1lBQTdCLGlCQW1CQztZQWxCRyxJQUFNLElBQUksR0FBRyxHQUFHLENBQUMsSUFBZ0IsQ0FBQTtZQUNqQyxJQUFNLE9BQU8sR0FBRyxFQUErQixDQUFBO1lBQy9DLElBQUksQ0FBQyxPQUFPLENBQUUsVUFBQSxJQUFJO2dCQUNkLElBQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtnQkFDckMsSUFBTSxPQUFPLEdBQUcsc0JBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLEdBQUcsS0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFBO2dCQUN2RixPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJO29CQUNuQyxJQUFJLEVBQUMsRUFBRTtvQkFDUCxLQUFLLEVBQUUsQ0FBQztvQkFDUixLQUFLLEVBQUUsQ0FBQztpQkFDWCxDQUFBO2dCQUNELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUNwQixDQUFDLENBQUMsQ0FBQTtZQUNGLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1QsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJO2dCQUNmLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSztnQkFDaEIsT0FBTyxTQUFBO2FBQ1YsQ0FBQyxDQUFBO1lBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ2xDLENBQUM7UUFDRCxLQUFLLEVBQUw7WUFDSSxJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNULElBQUksRUFBRSxJQUFJO2FBQ2IsQ0FBQyxDQUFBO1FBQ04sQ0FBQztRQUVELE9BQU8sRUFBUDtZQUNJLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1QsSUFBSSxFQUFFLEtBQUs7YUFDZCxDQUFDLENBQUE7UUFDTixDQUFDO1FBRUQsTUFBTSxFQUFOO1lBQ0ksSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDVCxJQUFJLEVBQUUsS0FBSzthQUNkLENBQUMsQ0FBQTtZQUNGLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUNuQixDQUFDO0tBQ0o7Q0FFSixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBhcHAgPSBnZXRBcHAoKSBhcyBJQXBwT3B0aW9uXHJcbmltcG9ydCB7IGdldEJpbGxzIH0gZnJvbSBcIi4uLy4uLy4uL2FwaS9pbmRleFwiXHJcbmltcG9ydCB7IGZvcm1hdE1vbnRoRGF0ZSB9IGZyb20gXCIuLi8uLi8uLi91dGlscy91dGlsXCJcclxuQ29tcG9uZW50KHtcclxuICAgIGRhdGE6IHtcclxuICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICBDdXN0b21CYXI6IGFwcC5nbG9iYWxEYXRhLkN1c3RvbUJhcixcclxuICAgICAgICBiaWxsczogW10gYXMgQW55QXJyYXksXHJcbiAgICAgICAgZGF0ZU1hcDoge30gYXMgUmVjb3JkPHN0cmluZywgQW55T2JqZWN0PixcclxuICAgICAgICBsb2FkaW5nOiBmYWxzZSxcclxuICAgICAgICB0b3RhbDogMCxcclxuICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgXCJwYWdlXCI6IDEsXHJcbiAgICAgICAgICAgIFwicGFnZV9zaXplXCI6IC0xXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsb2NhbHNOdW06IFtcIuS4gFwiLFwi5LqMXCIsXCLkuIlcIixcIuWbm1wiLFwi5LqUXCIsXCLlha1cIixcIuS4g1wiLFwi5YWrXCIsXCLkuZ1cIixcIuWNgVwiLFwi5Y2B5LiAXCIsXCLljYHkuoxcIl0sXHJcbiAgICB9LFxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIGxlZGdlcklkOiB7IFxyXG4gICAgICAgICAgICB0eXBlOiBOdW1iZXJcclxuICAgICAgICB9ICBcclxuICAgIH0sXHJcbiAgICBsaWZldGltZXM6IHtcclxuICAgICAgICByZWFkeSgpOiB2b2lke1xyXG4gICAgICAgICAgdGhpcy5nZXRCaWxscygpICBcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgb2JzZXJ2ZXJzOiB7XHJcbiAgICAgICAgbGVkZ2VySWQoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0QmlsbHMoKSBcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbWV0aG9kczoge1xyXG4gICAgICAgIGdldEJpbGxzKCk6IHZvaWR7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLmRhdGEubGVkZ2VySWQpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYodGhpcy5kYXRhLmxvYWRpbmcpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5kYXRhLmxvYWRpbmcgPSB0cnVlXHJcbiAgICAgICAgICAgIHd4LnNob3dMb2FkaW5nKHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAn5Yqg6L295LitJ1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBnZXRCaWxscyh0aGlzLmRhdGEubGVkZ2VySWQsIHRoaXMuZGF0YS5wYXJhbXMpLnRoZW4ocmVzPT57XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUJpbGxzUmVzKHJlcylcclxuICAgICAgICAgICAgICAgIHd4LmhpZGVMb2FkaW5nKClcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5sb2FkaW5nID0gZmFsc2VcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIGhhbmRsZUJpbGxzUmVzKHJlczogQW55T2JqZWN0KTogdm9pZHtcclxuICAgICAgICAgICAgY29uc3QgbGlzdCA9IHJlcy5saXN0IGFzIEFueUFycmF5XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGVNYXAgPSB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBBbnlPYmplY3Q+XHJcbiAgICAgICAgICAgIGxpc3QuZm9yRWFjaCggaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoaXRlbS5iaWxsX3RpbWUpXHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRlS2V5ID0gZm9ybWF0TW9udGhEYXRlKGRhdGUpICsgXCIgIOaYn+acn1wiICsgdGhpcy5kYXRhLmxvY2Fsc051bVtkYXRlLmdldERheSgpIC0gMV1cclxuICAgICAgICAgICAgICAgIGRhdGVNYXBbZGF0ZUtleV0gPSBkYXRlTWFwW2RhdGVLZXldIHx8IHtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0OltdLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50OiAwXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkYXRlTWFwW2RhdGVLZXldXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgICAgICAgICBiaWxsczogcmVzLmxpc3QsXHJcbiAgICAgICAgICAgICAgICB0b3RhbDogcmVzLnRvdGFsLFxyXG4gICAgICAgICAgICAgICAgZGF0ZU1hcFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmRhdGEuZGF0ZU1hcClcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQWRkKCk6IHZvaWR7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuICBcclxuICAgICAgICBvbkNsb3NlKCk6IHZvaWR7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uU2F2ZSgpOiB2b2lke1xyXG4gICAgICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgdGhpcy5nZXRCaWxscygpXHJcbiAgICAgICAgfSxcclxuICAgIH1cclxuXHJcbn0pXHJcblxyXG5leHBvcnQgeyB9XHJcblxyXG4iXX0=