"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var app = getApp();
var index_1 = require("../../../api/index");
var util_1 = require("../../../utils/util");
var dialog_1 = require("@vant/weapp/dialog/dialog");
var year = new Date().getFullYear();
var month = new Date().getMonth();
Component({
    data: {
        keyboardShow: false,
        CustomBar: app.globalData.CustomBar,
        bills: [],
        dateMap: {},
        monthMap: {},
        dateMapKeys: [],
        loading: false,
        total: 0,
        slideReset: true,
        params: {
            "year": year,
            "month": month + 1,
            "page": 1,
            "page_size": -1
        },
        localDay: ["日", "一", "二", "三", "四", "五", "六"],
        actionType: 'add',
        curEditItem: {},
        lastTouchId: 0,
        pickerVal: year + '年' + (month + 1) + '月',
        months: [
            {
                values: [year - 2 + '年', year - 1 + '年', year + '年'],
                defaultIndex: 2
            },
            {
                values: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
                defaultIndex: month
            }
        ],
        monthShow: false
    },
    properties: {
        ledgerId: {
            type: Number
        }
    },
    lifetimes: {},
    observers: {
        ledgerId: function () {
            this.getBills();
        }
    },
    methods: {
        onClick: function (e) {
            var bill = e.currentTarget.dataset.item;
            wx.navigateTo({
                url: '/pages/ledger/bill_detail/bill_detail',
                events: {
                    acceptDataFromOpenedPage: function (data) {
                        console.log(data);
                    },
                    someEvent: function (data) {
                        console.log(data);
                    }
                },
                success: function (res) {
                    res.eventChannel.emit('acceptDataFromOpenerPage', { bill: bill });
                }
            });
        },
        getBills: function () {
            var _this = this;
            if (!this.data.ledgerId) {
                return;
            }
            if (this.data.loading) {
                return;
            }
            this.setData({
                loading: true
            }, function () {
                wx.showLoading({
                    title: '加载中'
                });
                index_1.getBills(_this.data.ledgerId, _this.data.params).then(function (res) {
                    _this.handleBillsRes(res);
                    wx.hideLoading();
                    _this.setData({
                        loading: false
                    });
                });
            });
        },
        handleBillsRes: function (res) {
            var _this = this;
            var list = res.list;
            var dateCount = res.date_count;
            var monthCount = res.month_count;
            var dateMap = {};
            dateCount.forEach(function (item) {
                dateMap[_this.getDateKey(item.date)] = {
                    list: [],
                    total: item.total,
                    sumIn: item.sum_in,
                    sumOut: item.sum_out,
                };
            });
            list.forEach(function (item) {
                var date = dateMap[_this.getDateKey(item.bill_time)];
                if (date.list) {
                    date.list.push(item);
                }
                else {
                    wx.showToast({
                        title: "计数出错"
                    });
                }
            });
            this.setData({
                total: res.total,
                dateMap: dateMap,
                dateMapKeys: Object.keys(dateMap),
                monthMap: monthCount[0] || {},
            });
        },
        getDateKey: function (iosdate) {
            var date = new Date(iosdate);
            var dateKey = util_1.formatMonthDate(date) + "  星期" + this.data.localDay[date.getDay()];
            if (util_1.formatMonthDate(date) == util_1.formatMonthDate(new Date())) {
                dateKey = "今日  星期" + this.data.localDay[new Date().getDay()];
            }
            return dateKey;
        },
        onAdd: function () {
            this.setData({
                curEditItem: {},
                actionType: 'add',
                keyboardShow: true
            });
        },
        onClose: function () {
            this.setData({
                keyboardShow: false
            });
        },
        onSave: function () {
            this.setData({
                keyboardShow: false,
                slideReset: true,
            });
            this.getBills();
        },
        onClickDelete: function (e) {
            var self = this;
            var id = e.currentTarget.dataset.id;
            dialog_1.default({
                showCancelButton: true,
                title: '提示',
                message: '确定要删除吗？',
                asyncClose: true
            })
                .then(function () {
                if (dialog_1.default.confirm)
                    index_1.delBill(id).then(function (_) {
                        if (dialog_1.default.close)
                            dialog_1.default.close();
                        self.getBills();
                    });
            })
                .catch(function () {
                if (dialog_1.default.close)
                    dialog_1.default.close();
            });
        },
        onClickEdit: function (e) {
            this.setData({
                curEditItem: e.currentTarget.dataset.item,
                actionType: 'edit',
                keyboardShow: true
            });
        },
        onTouchstart: function (e) {
            var id = e.currentTarget.dataset.id;
            if (id == this.data.lastTouchId) {
                return;
            }
            this.setData({
                lastTouchId: id,
                slideReset: true,
            });
        },
        onMonthCancel: function () {
            this.setData({
                monthShow: false
            });
        },
        onMonthShow: function () {
            this.setData({
                monthShow: true
            });
        },
        onMonthConfirm: function (e) {
            var _this = this;
            var _a = e.detail.index, yi = _a[0], mi = _a[1];
            this.setData({
                monthShow: false,
                pickerVal: [year - 2, year - 1, year][yi] + '年' + (mi + 1) + '月',
                params: {
                    "page_size": -1,
                    page: 1,
                    month: mi + 1,
                    year: [year - 2, year - 1, year][yi]
                }
            }, function () {
                _this.getBills();
            });
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJpbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNLEdBQUcsR0FBRyxNQUFNLEVBQWdCLENBQUE7QUFDbEMsNENBQXNEO0FBQ3RELDRDQUFxRDtBQUNyRCxvREFBOEM7QUFHOUMsSUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtBQUNyQyxJQUFNLEtBQUssR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFBO0FBQ25DLFNBQVMsQ0FBQztJQUNOLElBQUksRUFBRTtRQUNGLFlBQVksRUFBRSxLQUFLO1FBQ25CLFNBQVMsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLFNBQVM7UUFDbkMsS0FBSyxFQUFFLEVBQWM7UUFDckIsT0FBTyxFQUFFLEVBQStCO1FBQ3hDLFFBQVEsRUFBRSxFQUErQjtRQUN6QyxXQUFXLEVBQUUsRUFBbUI7UUFDaEMsT0FBTyxFQUFFLEtBQUs7UUFDZCxLQUFLLEVBQUUsQ0FBQztRQUNSLFVBQVUsRUFBRSxJQUFJO1FBQ2hCLE1BQU0sRUFBRTtZQUNKLE1BQU0sRUFBRSxJQUFJO1lBQ1osT0FBTyxFQUFFLEtBQUssR0FBRSxDQUFDO1lBQ2pCLE1BQU0sRUFBRSxDQUFDO1lBQ1QsV0FBVyxFQUFFLENBQUMsQ0FBQztTQUNsQjtRQUNELFFBQVEsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUMsR0FBRyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsR0FBRyxFQUFDLEdBQUcsQ0FBQztRQUN4QyxVQUFVLEVBQUUsS0FBSztRQUNqQixXQUFXLEVBQUUsRUFBRTtRQUNmLFdBQVcsRUFBRSxDQUFDO1FBQ2QsU0FBUyxFQUFFLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRztRQUN6QyxNQUFNLEVBQUU7WUFDSjtnQkFDSSxNQUFNLEVBQUcsQ0FB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Q0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUc7Z0JBQzlELE1BQU0sRUFBRTtvQkFDSixXQUFXLEVBQUUsQ0FBQyxDQUFDO29CQUNmLElBQUksRUFBQyxDQUFDO29CQUNOLEtBQUssRUFBRSxFQUFFLEdBQUcsQ0FBQztvQkFDYixJQUFJLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDO2lCQUN2QzthQUNKLEVBQUU7Z0JBQ0MsS0FBSSxDQUFDLFFBQVEsRUFBRSxDQUFBO1lBQ25CLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQztLQUdKO0NBRUosQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXBwID0gZ2V0QXBwKCkgYXMgSUFwcE9wdGlvblxyXG5pbXBvcnQgeyBnZXRCaWxscywgZGVsQmlsbCB9IGZyb20gXCIuLi8uLi8uLi9hcGkvaW5kZXhcIlxyXG5pbXBvcnQgeyBmb3JtYXRNb250aERhdGUgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbFwiXHJcbmltcG9ydCBEaWFsb2cgZnJvbSBcIkB2YW50L3dlYXBwL2RpYWxvZy9kaWFsb2dcIlxyXG4vLyBjb25zdCBEaWFsb2cgPSByZXF1aXJlKCdAdmFudC93ZWFwcC9kaWFsb2cvZGlhbG9nJylcclxuXHJcbmNvbnN0IHllYXIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKClcclxuY29uc3QgbW9udGggPSBuZXcgRGF0ZSgpLmdldE1vbnRoKClcclxuQ29tcG9uZW50KHtcclxuICAgIGRhdGE6IHtcclxuICAgICAgICBrZXlib2FyZFNob3c6IGZhbHNlLFxyXG4gICAgICAgIEN1c3RvbUJhcjogYXBwLmdsb2JhbERhdGEuQ3VzdG9tQmFyLFxyXG4gICAgICAgIGJpbGxzOiBbXSBhcyBBbnlBcnJheSxcclxuICAgICAgICBkYXRlTWFwOiB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBBbnlPYmplY3Q+LFxyXG4gICAgICAgIG1vbnRoTWFwOiB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBBbnlPYmplY3Q+LFxyXG4gICAgICAgIGRhdGVNYXBLZXlzOiBbXSBhcyBBcnJheTxzdHJpbmc+LFxyXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgICAgIHRvdGFsOiAwLFxyXG4gICAgICAgIHNsaWRlUmVzZXQ6IHRydWUsXHJcbiAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgIFwieWVhclwiOiB5ZWFyLFxyXG4gICAgICAgICAgICBcIm1vbnRoXCI6IG1vbnRoICsxLFxyXG4gICAgICAgICAgICBcInBhZ2VcIjogMSxcclxuICAgICAgICAgICAgXCJwYWdlX3NpemVcIjogLTFcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxvY2FsRGF5OiBbXCLml6VcIiwgXCLkuIBcIixcIuS6jFwiLFwi5LiJXCIsXCLlm5tcIixcIuS6lFwiLFwi5YWtXCJdLFxyXG4gICAgICAgIGFjdGlvblR5cGU6ICdhZGQnLFxyXG4gICAgICAgIGN1ckVkaXRJdGVtOiB7fSxcclxuICAgICAgICBsYXN0VG91Y2hJZDogMCxcclxuICAgICAgICBwaWNrZXJWYWw6IHllYXIgKyAn5bm0JyArIChtb250aCArIDEpICsgJ+aciCcsXHJcbiAgICAgICAgbW9udGhzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlczogIFt5ZWFyIC0gMiArICflubQnLCB5ZWFyIC0gMSArICflubQnLCB5ZWFyICsgJ+W5tCddLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdEluZGV4OiAyXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlczogW1wi5LiA5pyIXCIsXCLkuozmnIhcIixcIuS4ieaciFwiLFwi5Zub5pyIXCIsXCLkupTmnIhcIixcIuWFreaciFwiLFwi5LiD5pyIXCIsXCLlhavmnIhcIixcIuS5neaciFwiLFwi5Y2B5pyIXCIsXCLljYHkuIDmnIhcIixcIuWNgeS6jOaciFwiXSxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHRJbmRleDogbW9udGhcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgbW9udGhTaG93OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBsZWRnZXJJZDogeyBcclxuICAgICAgICAgICAgdHlwZTogTnVtYmVyXHJcbiAgICAgICAgfSAgXHJcbiAgICB9LFxyXG4gICAgbGlmZXRpbWVzOiB7XHJcbiAgICAgICAgLy8gcmVhZHkoKTogdm9pZHtcclxuICAgICAgICAvLyAgIHRoaXMuZ2V0QmlsbHMoKVxyXG4gICAgICAgIC8vIH1cclxuICAgIH0sXHJcbiAgICBvYnNlcnZlcnM6IHtcclxuICAgICAgICBsZWRnZXJJZCgpOiB2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5nZXRCaWxscygpIFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgb25DbGljayhlKTogdm9pZHtcclxuICAgICAgICAgICAgY29uc3QgYmlsbCA9ICBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pdGVtXHJcbiAgICAgICAgICAgIHd4Lm5hdmlnYXRlVG8oe1xyXG4gICAgICAgICAgICAgICAgdXJsOiAnL3BhZ2VzL2xlZGdlci9iaWxsX2RldGFpbC9iaWxsX2RldGFpbCcsXHJcbiAgICAgICAgICAgICAgICBldmVudHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDkuLrmjIflrprkuovku7bmt7vliqDkuIDkuKrnm5HlkKzlmajvvIzojrflj5booqvmiZPlvIDpobXpnaLkvKDpgIHliLDlvZPliY3pobXpnaLnmoTmlbDmja5cclxuICAgICAgICAgICAgICAgICAgICBhY2NlcHREYXRhRnJvbU9wZW5lZFBhZ2U6IGZ1bmN0aW9uKGRhdGE6IGFueSk6IHZvaWQge1xyXG4gICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSlcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHNvbWVFdmVudDogZnVuY3Rpb24oZGF0YTogYW55KTogdm9pZCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g6YCa6L+HZXZlbnRDaGFubmVs5ZCR6KKr5omT5byA6aG16Z2i5Lyg6YCB5pWw5o2uXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLmV2ZW50Q2hhbm5lbC5lbWl0KCdhY2NlcHREYXRhRnJvbU9wZW5lclBhZ2UnLCB7IGJpbGw6IGJpbGwgfSlcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0QmlsbHMoKTogdm9pZHtcclxuICAgICAgICAgICAgaWYoIXRoaXMuZGF0YS5sZWRnZXJJZCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZih0aGlzLmRhdGEubG9hZGluZyl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgICAgICAgbG9hZGluZzogdHJ1ZVxyXG4gICAgICAgICAgICB9LCgpPT57XHJcbiAgICAgICAgICAgICAgICB3eC5zaG93TG9hZGluZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfliqDovb3kuK0nXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgZ2V0QmlsbHModGhpcy5kYXRhLmxlZGdlcklkLCB0aGlzLmRhdGEucGFyYW1zKS50aGVuKHJlcz0+e1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlQmlsbHNSZXMocmVzKVxyXG4gICAgICAgICAgICAgICAgICAgIHd4LmhpZGVMb2FkaW5nKClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9KSAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgfSxcclxuICAgICAgICBoYW5kbGVCaWxsc1JlcyhyZXM6IEFueU9iamVjdCk6IHZvaWR7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpc3QgPSByZXMubGlzdCBhcyBBbnlBcnJheVxyXG4gICAgICAgICAgICBjb25zdCBkYXRlQ291bnQgPSByZXMuZGF0ZV9jb3VudCBhcyBBbnlBcnJheVxyXG4gICAgICAgICAgICBjb25zdCBtb250aENvdW50ID0gcmVzLm1vbnRoX2NvdW50IGFzIEFueUFycmF5XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGVNYXAgPSB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBBbnlPYmplY3Q+XHJcbiAgICAgICAgICAgIGRhdGVDb3VudC5mb3JFYWNoKGl0ZW09PntcclxuICAgICAgICAgICAgICAgIGRhdGVNYXBbdGhpcy5nZXREYXRlS2V5KGl0ZW0uZGF0ZSldID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3Q6W10sXHJcbiAgICAgICAgICAgICAgICAgICAgdG90YWw6IGl0ZW0udG90YWwsXHJcbiAgICAgICAgICAgICAgICAgICAgc3VtSW46IGl0ZW0uc3VtX2luLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1bU91dDogaXRlbS5zdW1fb3V0LFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgbGlzdC5mb3JFYWNoKCBpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGUgPSBkYXRlTWFwW3RoaXMuZ2V0RGF0ZUtleShpdGVtLmJpbGxfdGltZSldXHJcbiAgICAgICAgICAgICAgICBpZihkYXRlLmxpc3Qpe1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGUubGlzdC5wdXNoKGl0ZW0pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHd4LnNob3dUb2FzdCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIuiuoeaVsOWHuumUmVwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICAgICAgICAgIHRvdGFsOiByZXMudG90YWwsXHJcbiAgICAgICAgICAgICAgICBkYXRlTWFwLFxyXG4gICAgICAgICAgICAgICAgZGF0ZU1hcEtleXM6IE9iamVjdC5rZXlzKGRhdGVNYXApLFxyXG4gICAgICAgICAgICAgICAgbW9udGhNYXA6IG1vbnRoQ291bnRbMF0gfHwge30sXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldERhdGVLZXkoaW9zZGF0ZTogc3RyaW5nKTogc3RyaW5ne1xyXG4gICAgICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoaW9zZGF0ZSlcclxuICAgICAgICAgICAgbGV0IGRhdGVLZXkgPSBmb3JtYXRNb250aERhdGUoZGF0ZSkgKyBcIiAg5pif5pyfXCIgKyB0aGlzLmRhdGEubG9jYWxEYXlbZGF0ZS5nZXREYXkoKV1cclxuICAgICAgICAgICAgaWYoZm9ybWF0TW9udGhEYXRlKGRhdGUpID09IGZvcm1hdE1vbnRoRGF0ZShuZXcgRGF0ZSgpKSl7XHJcbiAgICAgICAgICAgICAgICBkYXRlS2V5ID0gXCLku4rml6UgIOaYn+acn1wiICsgdGhpcy5kYXRhLmxvY2FsRGF5W25ldyBEYXRlKCkuZ2V0RGF5KCldXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGRhdGVLZXlcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQWRkKCk6IHZvaWR7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgICAgICAgICBjdXJFZGl0SXRlbToge30sXHJcbiAgICAgICAgICAgICAgICBhY3Rpb25UeXBlOiAnYWRkJyxcclxuICAgICAgICAgICAgICAgIGtleWJvYXJkU2hvdzogdHJ1ZVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcbiAgXHJcbiAgICAgICAgb25DbG9zZSgpOiB2b2lke1xyXG4gICAgICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgICAgICAga2V5Ym9hcmRTaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uU2F2ZSgpOiB2b2lke1xyXG4gICAgICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgICAgICAga2V5Ym9hcmRTaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHNsaWRlUmVzZXQ6IHRydWUsXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0QmlsbHMoKVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG9uQ2xpY2tEZWxldGUoZSk6IHZvaWR7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXHJcbiAgICAgICAgICAgIGNvbnN0IGlkID0gZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuaWRcclxuICAgICAgICAgICAgRGlhbG9nKHtcclxuICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ+aPkOekuicsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAn56Gu5a6a6KaB5Yig6Zmk5ZCX77yfJyxcclxuICAgICAgICAgICAgICAgIGFzeW5jQ2xvc2U6IHRydWVcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZihEaWFsb2cuY29uZmlybSlcclxuICAgICAgICAgICAgICAgICAgICBkZWxCaWxsKGlkKS50aGVuKF89PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoRGlhbG9nLmNsb3NlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBEaWFsb2cuY2xvc2UoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmdldEJpbGxzKClcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZihEaWFsb2cuY2xvc2UpXHJcbiAgICAgICAgICAgICAgICBEaWFsb2cuY2xvc2UoKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbkNsaWNrRWRpdChlKTogdm9pZHtcclxuICAgICAgICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICAgICAgICAgIGN1ckVkaXRJdGVtOiBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pdGVtLFxyXG4gICAgICAgICAgICAgICAgYWN0aW9uVHlwZTogJ2VkaXQnLFxyXG4gICAgICAgICAgICAgICAga2V5Ym9hcmRTaG93OiB0cnVlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25Ub3VjaHN0YXJ0KGUpe1xyXG4gICAgICAgICAgICBjb25zdCBpZCA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0LmlkXHJcbiAgICAgICAgICAgIGlmKGlkID09IHRoaXMuZGF0YS5sYXN0VG91Y2hJZCl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgICAgICAgbGFzdFRvdWNoSWQ6IGlkLFxyXG4gICAgICAgICAgICAgICAgc2xpZGVSZXNldDogdHJ1ZSxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvbk1vbnRoQ2FuY2VsKCk6IHZvaWR7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgICAgICAgICBtb250aFNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbk1vbnRoU2hvdygpOiB2b2lke1xyXG4gICAgICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgICAgICAgbW9udGhTaG93OiB0cnVlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbk1vbnRoQ29uZmlybShlKTogdm9pZHtcclxuICAgICAgICAgICAgY29uc3QgW3lpLCBtaV0gPSBlLmRldGFpbC5pbmRleFxyXG4gICAgICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgICAgICAgbW9udGhTaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHBpY2tlclZhbDogW3llYXIgLSAyLCB5ZWFyIC0gMSwgeWVhcl1beWldICsgJ+W5tCcgKyAobWkrMSkgKyAn5pyIJyxcclxuICAgICAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgICAgICAgIFwicGFnZV9zaXplXCI6IC0xLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2U6MSxcclxuICAgICAgICAgICAgICAgICAgICBtb250aDogbWkgKyAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHllYXI6IFt5ZWFyIC0gMiwgeWVhciAtIDEsIHllYXJdW3lpXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCAoKT0+e1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRCaWxscygpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9XHJcblxyXG59KVxyXG5cclxuZXhwb3J0IHsgfVxyXG5cclxuIl19