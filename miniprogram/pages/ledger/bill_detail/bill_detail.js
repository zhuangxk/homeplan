"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("../../../utils/util");
var index_1 = require("../../../api/index");
Page({
    data: {
        bill: {},
        downloadHost: 'https://oss.toko.wang/',
        fileList: [],
        list: [],
        showAction: false,
        saveType: 'add',
        sum: 0,
        id: 0,
        form: {
            name: '',
            amount: 1,
            money: "",
        }
    },
    onPreviewImage: function () {
        var fileList = this.data.fileList;
        wx.previewImage({
            urls: fileList,
            current: fileList[0],
            fail: function () {
                wx.showToast({ title: '预览图片失败', icon: 'none' });
            }
        });
    },
    onAdd: function () {
        this.setData({
            showAction: true,
            saveType: 'add',
            form: {
                name: '',
                amount: 1,
                money: '',
            }
        });
    },
    edit: function (e) {
        var item = e.currentTarget.dataset.item;
        this.setData({
            showAction: true,
            saveType: 'edit',
            id: item.id,
            form: {
                name: item.name,
                amount: item.amount,
                money: item.money,
            }
        });
    },
    onDel: function () {
        var _this = this;
        index_1.delBillDeltail(this.data.id).then(function () {
            _this.getList();
            _this.setData({
                showAction: false
            });
        });
    },
    onSave: function () {
        var _this = this;
        if (this.data.saveType == 'add') {
            var _a = this.data, bill = _a.bill, form = _a.form;
            index_1.addBillDeltail(bill.id, form).then(function () {
                _this.getList();
                _this.setData({
                    showAction: false
                });
            });
        }
        if (this.data.saveType == 'edit') {
            var _b = this.data, id = _b.id, form = _b.form;
            index_1.updateillDeltail(id, form).then(function () {
                _this.getList();
                _this.setData({
                    showAction: false
                });
            });
        }
    },
    getList: function () {
        var _this = this;
        wx.showLoading({
            title: '加载中'
        });
        index_1.getBillDeltails(this.data.bill.id).then(function (res) {
            _this.setData({
                list: res,
                sum: res.reduce(function (p, c) { return (+p) + (+c.money); }, 0)
            });
            wx.hideLoading();
        });
    },
    onClose: function () {
        this.setData({
            showAction: false
        });
    },
    onInput: function (e) {
        var value = e.detail;
        var key = e.currentTarget.id;
        var form = this.data.form;
        form[key] = value;
        this.setData({
            form: form
        });
    },
    onLoad: function () {
        var _this = this;
        var eventChannel = this.getOpenerEventChannel();
        eventChannel.on('acceptDataFromOpenerPage', function (data) {
            var downloadHost = _this.data.downloadHost;
            var bill = data.bill;
            var fileList = [];
            bill.Pic1 && fileList.push(downloadHost + bill.Pic1.file_name);
            bill.Pic2 && fileList.push(downloadHost + bill.Pic2.file_name);
            _this.setData({
                bill: bill,
                billTime: util_1.formatTime(new Date(bill.bill_time)),
                fileList: fileList,
            }, function () {
                _this.getList();
            });
        });
    },
});
//# sourceMappingURL=data:application/json;base64,